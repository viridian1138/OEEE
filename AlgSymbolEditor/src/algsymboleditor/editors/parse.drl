

//$$strtCprt
//
// OEEE (Oversimplified [MathML] Expression Editor for Eclipse)
// 
// Copyright (C) 2016 Thornton Green
// 
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as
// published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, 
// see <http://www.gnu.org/licenses>.
// Additional permission under GNU GPL version 3 section 7
//
//
//$$endCprt

package algsymboleditor.editors;




import simplealgebra.DoubleElem;
import simplealgebra.symbolic.DroolsSession;
import algsymboleditor.editors.ParseNode;
import algsymboleditor.editors.ParseReng;
import algsymboleditor.editors.ParsePlaceholder;







rule "Apply Placeholder"
     when
          r0 : ParseReng( )
          p : ParsePlaceholder( elem == r0.getStrt() )
     then
//          System.out.println( "Apply Placeholder" );
          modify( p ){ setElem( r0.getEnd() ) };
end







rule "Apply ParseNode"
     when
          r0 : ParseReng( )
          p : ParseNode( next == r0.getStrt() )
          not( ParseReng( strt == p ) )
          rend : ParseNode() from r0.getEnd()
          ds : DroolsSession()
     then
//          System.out.println( "Apply ParseNode" );
          insert( new ParseReng( p , p.applyReng( rend , ds ) ) );
end







rule "Msup Node"
     when
          p0 : MsupStartNode( )
          p1 : ParseRendNode( ) from p0.next;
          p2 : ParseRendNode( ) from p1.next;
          p3 : MsupEndNode( ) from p2.next
          not( ParseReng( strt == p0 ) )
          not( ParseReng( strt == p1 ) )
          not( ParseReng( strt == p2 ) )
          not( ParseReng( strt == p3 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Msup Node " + p0 );
          insert( new ParseReng( p0 , p0.applyParse( p1 , p2 , p3 , ds ) ) );
end







rule "Msub Node"
     when
          p0 : MsubStartNode( )
          p1 : ParseRendNode( ) from p0.next;
          p2 : ParseRendNode( ) from p1.next;
          p3 : MsubEndNode( ) from p2.next
          not( ParseReng( strt == p0 ) )
          not( ParseReng( strt == p1 ) )
          not( ParseReng( strt == p2 ) )
          not( ParseReng( strt == p3 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Msub Node " + p0 );
          insert( new ParseReng( p0 , p0.applyParse( p1 , p2 , p3 , ds ) ) );
end







rule "Mover Node"
     when
          p0 : MoverStartNode( )
          p1 : ParseRendNode( ) from p0.next;
          p2 : ParseRendNode( ) from p1.next;
          p3 : MoverEndNode( ) from p2.next
          not( ParseReng( strt == p0 ) )
          not( ParseReng( strt == p1 ) )
          not( ParseReng( strt == p2 ) )
          not( ParseReng( strt == p3 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Mover Node " + p0 );
          insert( new ParseReng( p0 , p0.applyParse( p1 , p2 , p3 , ds ) ) );
end







rule "Munder Node"
     when
          p0 : MunderStartNode( )
          p1 : ParseRendNode( ) from p0.next;
          p2 : ParseRendNode( ) from p1.next;
          p3 : MunderEndNode( ) from p2.next
          not( ParseReng( strt == p0 ) )
          not( ParseReng( strt == p1 ) )
          not( ParseReng( strt == p2 ) )
          not( ParseReng( strt == p3 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Munder Node " + p0 );
          insert( new ParseReng( p0 , p0.applyParse( p1 , p2 , p3 , ds ) ) );
end







rule "Msubsup Node"
     when
          p0 : MsubsupStartNode( )
          p1 : ParseRendNode( ) from p0.next;
          p2 : ParseRendNode( ) from p1.next;
          p3 : ParseRendNode( ) from p2.next;
          p4 : MsubsupEndNode( ) from p3.next
          not( ParseReng( strt == p0 ) )
          not( ParseReng( strt == p1 ) )
          not( ParseReng( strt == p2 ) )
          not( ParseReng( strt == p3 ) )
          not( ParseReng( strt == p4 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Msubsup Node " + p0 );
          insert( new ParseReng( p0 , p0.applyParse( p1 , p2 , p3 , p4 , ds ) ) );
end







rule "Munderover Node"
     when
          p0 : MunderoverStartNode( )
          p1 : ParseRendNode( ) from p0.next;
          p2 : ParseRendNode( ) from p1.next;
          p3 : ParseRendNode( ) from p2.next;
          p4 : MunderoverEndNode( ) from p3.next
          not( ParseReng( strt == p0 ) )
          not( ParseReng( strt == p1 ) )
          not( ParseReng( strt == p2 ) )
          not( ParseReng( strt == p3 ) )
          not( ParseReng( strt == p4 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Munderover Node " + p0 );
          insert( new ParseReng( p0 , p0.applyParse( p1 , p2 , p3 , p4 , ds ) ) );
end







rule "Mfrac Node"
     when
          p0 : MfracStartNode( )
          p1 : ParseRendNode( ) from p0.next;
          p2 : ParseRendNode( ) from p1.next;
          p3 : MfracEndNode( ) from p2.next
          not( ParseReng( strt == p0 ) )
          not( ParseReng( strt == p1 ) )
          not( ParseReng( strt == p2 ) )
          not( ParseReng( strt == p3 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Mfrac Node " + p0 );
          insert( new ParseReng( p0 , p0.applyParse( p1 , p2 , p3 , ds ) ) );
end







rule "Mfenced Node"
     when
          p0 : MfencedStartNode( )
          p1 : ParseRendNode( ) from p0.next;
          p2 : MfencedEndNode( ) from p1.next
          not( ParseReng( strt == p0 ) )
          not( ParseReng( strt == p1 ) )
          not( ParseReng( strt == p2 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Mfenced Node " + p0 );
          insert( new ParseReng( p0 , p0.applyParse( p1 , p2 , ds ) ) );
end







rule "Mrow Cond Node"
     when
          p0 : MrowCondNode( )
          p1 : ParseRendNode( ) from p0.next;
          not( ParseReng( strt == p0 ) )
          not( ParseReng( strt == p1 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Mrow Cond Node " + p0 );
          insert( new ParseReng( p0 , p0.applyParseRend( p1 , ds ) ) );
end







rule "Mrow End Node"
     when
          p0 : MrowCondNode( )
          p1 : MrowEndNode( ) from p0.next;
          not( ParseReng( strt == p0 ) )
          not( ParseReng( strt == p1 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Mrow End Node " + p0 );
          insert( new ParseReng( p0 , p0.applyMrowEnd( p1 , ds ) ) );
end







rule "Mrow Start Node"
     when
          p0 : MrowStartNode( )
          not( ParseReng( strt == p0 ) )
          ds : DroolsSession()
     then
//          System.out.println( "Mrow Start Node " + p0 );
          insert( new ParseReng( p0 , p0.applyMrowStart( ds ) ) );
end







